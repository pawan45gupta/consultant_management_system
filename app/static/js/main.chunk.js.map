{"version":3,"sources":["config.js","Components/ConfirmModal.jsx","App.js","reportWebVitals.js","index.js"],"names":["API_END_POINT","ConfirmModal","show","handleClose","handleDelete","Modal","onHide","Header","closeButton","Title","Body","Footer","Button","variant","onClick","App","useState","rowData","setRowData","userGroup","pageState","setPageState","headers","name","nameEQ","ca","document","cookie","split","i","length","c","charAt","substring","indexOf","readCookie","gridApi","setGridApi","setGridColumnApi","setShow","showRemoveButton","setShowRemoveButton","useEffect","a","fetch","res","json","data","console","log","fetchData","window","sessionStorage","getItem","selectedRows","getSelectedRows","axios","delete","id","className","exportDataAsCsv","style","width","height","components","actionCellRenderer","params","element","createElement","btn","innerHTML","onclick","alert","cancelBtn","isCurrentRowEditing","api","getEditingCells","some","cell","rowIndex","node","appendChild","defaultColDef","flex","minWidth","filter","editable","onGridReady","columnApi","onCellValueChanged","event","colDef","field","newValue","put","rowSelection","onSelectionChanged","suppressExcelExport","Object","keys","map","val","pinned","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.chunk.js","sourcesContent":["const API_END_POINT = 'http://127.0.0.1:8000/api/';\n\nexport default API_END_POINT;","import React from \"react\";\nimport {Button, Modal} from \"react-bootstrap\";\n\nconst ConfirmModal = ({ show, handleClose, handleDelete }) => (\n  <Modal show={show} onHide={handleClose}>\n    <Modal.Header closeButton>\n      <Modal.Title>Confirmation</Modal.Title>\n    </Modal.Header>\n    <Modal.Body>Are you sure to delete consultant?</Modal.Body>\n    <Modal.Footer>\n      <Button variant=\"secondary\" onClick={handleClose}>\n        Close\n      </Button>\n      <Button variant=\"danger\" onClick={handleDelete}>\n        Delete\n      </Button>\n    </Modal.Footer>\n  </Modal>\n);\n\nexport default ConfirmModal;\n","import { useEffect, useState } from \"react\";\nimport { AgGridColumn, AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\nimport \"./App.css\";\nimport Button from \"react-bootstrap/Button\";\nimport API_END_POINT from \"./config\";\nimport axios from \"axios\";\nimport ConfirmModal from \"./Components/ConfirmModal\";\n\nfunction App() {\n  const [rowData, setRowData] = useState([]);\n  const [pageState, setPageState] = useState({\n    userGroup: \"superUser\",\n  });\n  function readCookie(name) {\n    var nameEQ = name + \"=\";\n    var ca = document.cookie.split(\";\");\n    for (var i = 0; i < ca.length; i++) {\n      var c = ca[i];\n      while (c.charAt(0) === \" \") c = c.substring(1, c.length);\n      if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);\n    }\n    return null;\n  }\n\n  const csrftoken = readCookie(\"csrftoken\");\n  const headers = { \"X-CSRFToken\": csrftoken };\n\n  const [gridApi, setGridApi] = useState(null);\n  const [gridColumnApi, setGridColumnApi] = useState(null);\n  const [show, setShow] = useState(false);\n  const [showRemoveButton, setShowRemoveButton] = useState(false);\n\n  const onGridReady = (params) => {\n    setGridApi(params.api);\n    setGridColumnApi(params.columnApi);\n  };\n\n  const onCellValueChanged = (event) => {\n    console.log(event);\n    console.log(\n      \"onCellValueChanged: \" + event.colDef.field + \" = \" + event.newValue\n    );\n    if (event.data.id) {\n      axios.put(`${API_END_POINT}consultant/${event.data.id}/`, event.data, {\n        headers: headers\n      });\n    }\n  };\n\n  const ActionCellRenderer = (params) => {\n    const element = document.createElement(\"span\");\n    const btn = document.createElement(`button`);\n    btn.innerHTML = \"Edit\";\n    btn.className = \"btn btn-primary\";\n    btn.onclick = function () {\n      alert(\"Button is clicked\");\n    };\n    const cancelBtn = document.createElement(`button`);\n    let editingCells = params.api.getEditingCells();\n    // checks if the rowIndex matches in at least one of the editing cells\n    let isCurrentRowEditing = editingCells.some((cell) => {\n      return cell.rowIndex === params.node.rowIndex;\n    });\n    if (isCurrentRowEditing) {\n      const cancelBtn = document.createElement(`button`);\n      cancelBtn.innerHTML = \"Cancel\";\n      cancelBtn.className = \"btn btn-secondary\";\n      cancelBtn.onclick = function () {\n        alert(\"Button is clicked\");\n      };\n      btn.innerHTML = \"Update\";\n    }\n    element.appendChild(btn);\n    isCurrentRowEditing && element.appendChild(cancelBtn);\n    return element;\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      const res = await fetch(`${API_END_POINT}consultant/`);\n      const data = await res.json();\n      console.log(data);\n      setRowData(data);\n    }\n    fetchData();\n    setPageState({\n      userGroup: window.sessionStorage.getItem(\"userGroup\"),\n    });\n    console.log(window.sessionStorage.getItem(\"userGroup\"));\n  }, []);\n\n  const addConsultant = async () => {\n    const item = {\n      consultant_name: \"Gupta, Pawan\",\n      uid: \"c_adnant\",\n      first_name: \" Adnan\",\n      last_name: \"Tanwir\",\n      eda_vendor: \"Cadence\",\n      consultant_type: \"Applications Engineer\",\n      technology_focus: \"Functional Verification\",\n      access_type: \"Badge and System\",\n      consultant_start_date: \"2015-03-23\",\n      proposed_end_date: \"2024-12-30\",\n      qcm_consultant_current_status: \"Active\",\n      off_board_consultant: null,\n      current_vpn_status: \"Enabled\",\n      consultant_location: null,\n      current_consultant_sponsor: \"Huang, Joe\",\n      project: \"\",\n      justificaiton_for_remaining_onboarded: null,\n      approval_for_justification: null,\n      approval_comments: null,\n    };\n    const res = await axios.post(`${API_END_POINT}consultant/`, item, {\n      headers: headers\n    });\n    console.log(res.data);\n  };\n\n  const removeConsultant = () => {\n    setShow(true);\n  };\n\n  // const actionCellRenderer(params) {\n  // console.log('params', params);\n  //   let eGui = document.createElement(\"div\");\n  //   let editingCells = params.api.getEditingCells();\n  //   // checks if the rowIndex matches in at least one of the editing cells\n  //   let isCurrentRowEditing = editingCells.some((cell) => {\n  //     return cell.rowIndex === params.node.rowIndex;\n  //     });\n  //   if (isCurrentRowEditing) {\n  //       eGui.innerHTML = `\n  //           <Button variant=\"primary\" onClick={${addConsultant}}>Edit</Button>\n  //           <Button variant=\"secondary\" onClick={${addConsultant}}>Cancel</Button>\n  //           `;\n  //   } else {\n  //   eGui.innerHTML = `\n  //   <Button variant=\"primary\" onClick={${addConsultant}}>Edit</Button>`;\n  // }\n  // return eGui;\n  // }\n\n  const onSelectionChanged = () => {\n    var selectedRows = gridApi.getSelectedRows();\n    selectedRows && selectedRows.length > 0 && setShowRemoveButton(true);\n  };\n\n  const handleClose = () => setShow(false);\n  const handleDelete = async () => {\n    var selectedRows = gridApi.getSelectedRows();\n    let res = await axios.delete(\n      `${API_END_POINT}consultant/${selectedRows[0]?.id}`, {\n        headers: headers\n      }\n    );\n    res = await fetch(`${API_END_POINT}consultant/`);\n    const data = await res.json();\n    setRowData(data);\n    setShow(false);\n    setShowRemoveButton(false);\n  };\n\n  const exportToCsv = () => {\n    gridApi.exportDataAsCsv();\n  };\n\n  return (\n    <div className=\"App\">\n      {console.log(pageState)}\n      {pageState.userGroup === \"superUser\" ? (\n        <div>\n          {/* <Button variant=\"primary\" className={\"m-2\"} onClick={addConsultant}>\n            Add Consultant\n          </Button> */}\n          {showRemoveButton && (\n            <Button\n              variant=\"danger\"\n              className={\"m-2\"}\n              onClick={removeConsultant}\n            >\n              Remove Consultant\n            </Button>\n          )}\n          <Button variant=\"primary\" className=\"m-2\" onClick={exportToCsv}>\n            Export to CSV\n          </Button>\n        </div>\n      ) : null}\n      <ConfirmModal\n        show={show}\n        handleClose={handleClose}\n        handleDelete={handleDelete}\n      />\n      <div\n        className=\"ag-theme-alpine\"\n        style={{ width: \"100%\", height: \"1000px\" }}\n      >\n        <AgGridReact\n          components={{\n            actionCellRenderer: ActionCellRenderer,\n          }}\n          defaultColDef={{\n            flex: 1,\n            minWidth: 200,\n            filter: true,\n            editable: true,\n          }}\n          rowData={rowData}\n          onGridReady={onGridReady}\n          onCellValueChanged={onCellValueChanged}\n          rowSelection={\"single\"}\n          onSelectionChanged={onSelectionChanged}\n          suppressExcelExport={true}\n        >\n          {rowData &&\n            rowData.length > 0 &&\n            Object.keys(rowData[0])?.map((val) => (\n              <AgGridColumn\n                field={val}\n                pinned={\n                  val === \"id\" || val === \"consultant_name\" ? \"left\" : null\n                }\n              ></AgGridColumn>\n            ))}\n          {/* <AgGridColumn\n            field={\"Action\"}\n            editable={false}\n            cellRenderer={\"actionCellRenderer\"}\n          ></AgGridColumn> */}\n        </AgGridReact>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}